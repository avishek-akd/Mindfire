Create a table named tblEmp and insert some data by using following script:

CREATE TABLE [dbo].[tblEmp](
    [ntEmpID] [bigint] IDENTITY(1,1) NOT NULL PRIMARY KEY,
    [vcName] [varchar](100) NULL,
    [vcMobieNumer] [varchar](15) NULL,
    [vcSkills] [varchar](max) NULL,
    [moSalary] [money] DEFAULT(0) NOT NULL,
    [ntLevel] [bit] DEFAULT(0) NOT NULL
)

--Inserting demo data
INSERT [dbo].[tblEmp] VALUES
    ('Scott','123-456-3456','CF,HTML,JavaScript',50,0),
    ('Greg',NULL,'HTML5,JavaScript,Jquery',80,0),
    ('David','123-456-3458','Sql,JavaScript',30,1),
    ('Alan','123-456-3459','C#,VB,XQuery',60,1),
    ('Jhon',NULL,'XML,HTML',80,1),
    ('Alan','123-456-3461','Sql,Oracle,DB2',70,1)
        

Assignment:
-----------------------------------------------------
/* SELECT Clause  */

1. Write a single sql query with following information's:

a. Total number number of employees
b. Minimum salary received by any employees.
c. Total distinct ntLevel

Ans:

SELECT COUNT(*) AS Total_no_of_employee , MIN(moSalary) AS Minimum_moSalary, COUNT(DISTINCT ntLevel) AS Total_distinct_ntLevel 
FROM tblEmp

---------------------------------------------------
            
/* FROM clause */

2. Correct this query:

    SELECT [ntEmpID], E.[vcName],tblEmp.[vcMobieNumer]
    FROM tblEmp E

Ans:

SELECT E.[ntEmpID], E.[vcName],E.[vcMobieNumer] FROM tblEmp AS E

---------------------------------------------------
        
/* WHERE clause */
        
3. Write a single select query which satisfies the following conditions:
    a. If any employee does not have a phone number then select that employee if ntLevel  equal to 1
    b. else select those employees whose ntLevel is equal to 0   

Ans: 

SELECT * FROM [dbo].[tblEmp] WHERE (vcMobieNumer IS NULL AND ntLevel=1) OR (vcMobieNumer IS NOT NULL AND ntLevel=0)


----------------------------------------------------
            
/*  ORDER BY clause */

4.  Write a sql query which displays those employee data first, who knows javascript.

Ans:
 
SELECT * FROM tblEmp ORDER BY (CASE WHEN vcSkills LIKE 'JavaScript' THEN 1 ELSE 2 END)

---------------------------------------------------
        
/* TOP  clause */
    
5. Explain the TOP clause in the following sql queries?
    
    a. SELECT TOP(1) * FROM tblEmp 
    b. SELECT TOP(SELECT 3/2) * FROM tblEmp 
    c. SELECT TOP(1) PERCENT * FROM tblEmp
    d. SELECT TOP(1) WITH TIES * FROM tblEmp ORDER BY vcName


Ans:
    a.)The SQL statement selects the first/top  records from the "tblEmp" table
    b.)The SQL statement selects the first (3/2=1)  records from the "tblEmp" table
    c.)The SQL statement selects the first/top  1% record  from the "tblEmp" table
    d.)The SQL statement selects 2 (As vcName same in 2 rows)  records from the "tblEmp" table ties with the same vcName after ascending vcName 

---------------------------------------------------
        
/* GROUP BY/HAVING I know we did not discuss this, but do if you can!*/

6. When I executed this query:
           
   SELECT [vcName],[vcMobieNumer] FROM [dbo].[tblEmp] GROUP BY [vcName]
           
    I got following error message:
    Column 'dbo.tblEmp.vcMobieNumer' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.

    Can you explain above error message? Write at least two possible solutions. 


Ans:

Expressions that are not encapsulated within an aggregate function and must be included in the GROUP BY Clause
at the end of the SQL statement.

Sol:
 
SELECT [vcName],[vcMobieNumer] FROM [dbo].[tblEmp] GROUP BY [vcName], [vcMobieNumer]

--------------------------------------------------
        
7. Write a sql query to get the ntLevel of the employees getting salary greater than average salary.


Ans:
 
SELECT ntLevel FROM tblEmp WHERE moSalary>(SELECT AVG(moSalary) FROM tblEmp)


-------------------------------------------------------
          
Do the following questions using AdventureWorks DB
-------------------------------------------------------
8. Write a query to get the count of employees with a valid Suffix 

USE AdventureWorks2012;

Ans:
 
SELECT COUNT(*) AS Employees_With_Valid_Suffix FROM Person.Person WHERE Suffix IS NOT NULL


-----------------------------------------------------------

9. Using BusinessEntityAddress table (and other tables as required), list the full name of people living in the state of Florida

Ans: 

SELECT (ISNULL(p.FirstName,'') +' '+ ISNULL(p.MiddleName,'') +' '+ ISNULL(p.LastName,''))  AS FullName FROM
(((Person.Address AS a 
INNER JOIN Person.StateProvince AS sp ON  a.StateProvinceID=sp.StateProvinceID)
INNER JOIN Person.BusinessEntityAddress AS bea ON bea.AddressID=a.AddressID)
INNER JOIN Person.Person AS p ON p.BusinessEntityID = bea.BusinessEntityID)
WHERE sp.Name='Florida'


Select (p.FirstName +'  '+ p.MiddleName +'  '+ p.LastName)  as FullName from
(((Person.Address a 
INNER JOIN Person.StateProvince sp ON  a.StateProvinceID=sp.StateProvinceID)
INNER JOIN Person.BusinessEntityAddress  bea ON bea.AddressID=a.AddressID)
INNER JOIN Person.Person p ON p.BusinessEntityID = bea.BusinessEntityID)
where sp.Name='Florida'

------------------------------------------------------------

10. For each order show the SalesOrderID and SubTotal calculated two ways:
A) From the SalesOrderHeader
B) Sum of OrderQty*UnitPrice
All above must be in 1 query.

ANS: 

SELECT sod.SalesOrderID, AVG(soh.SubTotal) AS Subtotal1, SUM(sod.OrderQty * sod.UnitPrice) AS Subtotal2 
FROM Sales.SalesOrderDetail AS sod 
INNER JOIN Sales.SalesOrderHeader AS soh
ON soh.SalesOrderID=sod.SalesOrderID GROUP BY sod.SalesOrderID


SELECT sod.SalesOrderID, soh.SubTotal AS Subtotal1, SUM(sod.OrderQty * sod.UnitPrice) AS Subtotal2 
FROM Sales.SalesOrderDetail AS sod 
INNER JOIN Sales.SalesOrderHeader AS soh
ON soh.SalesOrderID=sod.SalesOrderID GROUP BY sod.SalesOrderID, soh.SubTotal 

-------------------------------------------------------------------------

11. "Single Item Order" is a customer order where only one item is ordered. Show the SalesOrderID and the UnitPrice for every Single Item Order.
	
ANS:

SELECT SalesOrderID, UnitPrice FROM Sales.SalesOrderDetail WHERE OrderQty=1;

-----------------------------------------------------------------------------------

12. Show the product description for culture 'fr' for product with ProductID 736.

ANS:

SELECT pd.Description FROM
((Production.ProductDescription AS pd 
INNER JOIN Production.ProductModelProductDescriptionCulture AS pmpdc ON pd.ProductDescriptionID=pmpdc.ProductDescriptionID)
INNER JOIN Production.Product AS pp ON pmpdc.ProductModelID=pp.ProductModelID)
WHERE pmpdc.CultureID='fr' and pp.ProductID=736


----------------------------------------------------------------------------------------
13. Show OrdeQty, the Name and the ListPrice of the order made by CustomerID 635

ANS:

SELECT sod.OrderQty, p.Name, p.ListPrice FROM
((Sales.SalesOrderHeader AS soh 
INNER JOIN Sales.SalesOrderDetail AS sod ON soh.SalesOrderID=sod.SalesOrderID)
INNER JOIN Production.Product AS p ON sod.ProductID=p.ProductID)
WHERE soh.CustomerID=635


---------------------------------------------------------------------------------------------
14. How many products in ProductSubCategory 'Cranksets' have been sold to an address in 'London'?

ANS:

SELECT SUM(sod.OrderQty) AS Total_Order FROM
(((( Sales.SalesOrderHeader AS soh 
INNER JOIN Person.Address AS a ON soh.ShipToAddressID= a.AddressID)
INNER JOIN Sales.SalesOrderDetail AS sod ON sod.SalesOrderID=soh.SalesOrderID)
INNER JOIN Production.Product AS p ON p.ProductID=sod.ProductID)
INNER JOIN Production.ProductSubcategory AS ps ON ps.ProductSubcategoryID=p.ProductSubcategoryID)
WHERE a.City='London' and ps.Name='Cranksets'
------------------------------------------------------------------------------------------------
15. Describe Char, Varchar and NVarChar datatypes with examples.

ANS:

CHAR data type: synonym for character

1) It is a fixed length data type
2) Used to store non-Unicode characters
3) Occupiers 1 byte of space for each character

If the value provided to a variable of CHAR data type is shorter than the length of a column of declared the size 
of the variable, then the value would be right-padded with blanks to match the size of column length. 

VARCHAR data type: synonym for character varying

1) It is a variable length data type
2) Used to store non-Unicode characters
3) Occupies 1 byte of space for each character


NVarChar data type: synonym for national char varying and national character varying

1) It is a variable-length data type
2) Used to store Unicode characters
3) Occupies 2 bytes of space for each character


CREATE TABLE myTable(
	fName CHAR (10),
	mName VARCHAR(10),
	lName NVARCHAR(10)	
);

INSERT INTO myTable VALUES("Nitin", "Kumar","UNICODE STRING");

